Hi, my name is LH. My background is in biochemistry, and before Hb I worked first in academic research labs and then at a biotech startup in SSF. There I got to work closely with engineers and developers and got to see the process of programming intimately, and after a while, I was like "hey, what they're doing seems like a lot more fun than what I'm doing."
My project is called Novel Idea. It uses book information scraped from Goodreads to recommend books to users based on information they input, and uses machine learning to classify reviews into positive and negative categories. I used a Flask framework that talks to a postgres db via SQLAlchemy, and I have 45% test coverage.
To scrape the information you see here, I used the Python module Scrapy to write spiders and a Chrome extension called Selector Gadget to generate XPath selectors.
There is a search feature where you can search for a specific book by title that will autocomplete with books from the db, and you can go directly to the book's page, where you can see more information about the book and give it between 1 and 5 stars.
On the user's profile page, you can see the books you have rated, as well as any genres you have favorited. You can page through the db using ajax calls that pass a JS counter to a sqlalchemy query so it knows the appropriate number to offset. More ajax calls let the user favorite or delete genres. Error handling in Flask and JS will not let you add the same genre twice.
{My data model is as follows: three main tables, Users, Genres, and Books. All three have a many to many relationship. Users and Genres and Books and Genres' relationships consist of an association table, while Users and Books have a middle table called Ratings.}
The rec algorithm searches for matches between the user's list of genres and the every book's list of genres. It will recommend books that have two or more genres in common with the user.
Probably the most exciting feature of this app is the machine learning analysis of the scraped reviews from Goodreads. I built a sentiment analyzer in Python using sci kit learn and numpy that uses the Naive Bayes algorithm to classify reviews into binary categories of positive and negative. I trained my classifier by feeding it the vectorized text of the reviews, using the number of stars as pre-assigned labels for the training data set. In brief, the Naive Bayes algorithm calculates the probability of a given word appearing in a positive or negative review based on the frequency that it has seen in the training data. I received a precision of about 85% and a recall of about 80%. This graph shows the words that the classifier considered most indicative of review polarity. Some of them make sense - "DNF" means did not finish, and overuse and congratulatory you might expect. Words like "coworkers" and "sylvia" appear because those words were common in reviews of certain poorly-reviewed books where those concepts were central.
In conclusion, I have several features planned out for my next sprint on this project. I want to make a feature where you can type in a review of a book and the classifier will guess how many stars you are giving the book. I also want to create boards where a user can save their recommendations. Thirdly, I want to add more complex visualization of how genres overlap with each other because I want to see whether it falls across the lines you'd expect. Thank you for your attention and goodnight.
